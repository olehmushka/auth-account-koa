openapi: "3.0.0"

info:
  description: This package defines the Auth service.
  title: Auth Service
  version: 1.0.0
  license:
    name: MIT

paths:
  "/api/auth/sign-up":
    post:
      summary: Create a user
      operationId: createUser
      tags:
      - user
      requestBody:
        description: The user information
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SignUpUser"
        required: true
      responses:
        "201":
          description: Saved user
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SignUpUserResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
  "/api/auth/sign-in":
    post:
      summary: Sign In with credentials
      operationId: signInAuth
      tags:
      - auth
      requestBody:
        description: The user's credentials
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SignInUser"
        required: true
      responses:
        "200":
          description: Successfully signed in
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SignInUserResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"

  "/api/auth/users":
    get:
      summary: Get users
      operationId: getUsers
      tags:
      - user
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
        - name: skip
          in: query
          description: How many items should be skipped
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: A paged array of users
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/GetUsersResponse"

  "/api/auth/docs":
    get:
      responses:
        "200":
          description: A docs for Auth Service
          content:
            text/html:
              schema:
                type: string


components:
  schemas:
    UserId:
      type: string
      format: uuid
    UserEmail:
      type: string
      format: email
    UserPassword:
      type: string
      format: password
      minLength: 6
      maxLength: 20
    UserRole:
      type: string
      enum: [ADMIN, USER, GUEST]
    FullUser:
      required:
        - id
        - username
        - email
        - firstName
        - lastName
        - password
        - role
      properties:
        id:
          "$ref": "#/components/schemas/UserId"
        username:
          type: string
        email:
          "$ref": "#/components/schemas/UserEmail"
        firstName:
          type: string
        lastName:
          type: string
        password:
          "$ref": "#/components/schemas/UserPassword"
        role:
          "$ref": "#/components/schemas/UserRole"
    SafeUser:
      required:
        - id
        - username
        - email
        - firstName
        - lastName
        - role
      properties:
        id:
          "$ref": "#/components/schemas/UserId"
        username:
          type: string
        email:
          "$ref": "#/components/schemas/UserEmail"
        firstName:
          type: string
        lastName:
          type: string
        role:
          "$ref": "#/components/schemas/UserRole"
    SaveUsers:
      type: array
      items:
        "$ref": "#/components/schemas/SafeUser"

    SignUpUser:
      required:
      - username
      - email
      - firstName
      - lastName
      - password
      - role
      properties:
        username:
          type: string
        email:
          "$ref": "#/components/schemas/UserEmail"
        firstName:
          type: string
        lastName:
          type: string
        password:
          "$ref": "#/components/schemas/UserPassword"
        role:
          "$ref": "#/components/schemas/UserRole"
    SignUpUserResponse:
      required:
      - data
      properties:
        data:
          required:
          - user
          - authToken
          properties:
            authToken:
              type: string
            user:
              "$ref": "#/components/schemas/SafeUser"

    SignInUser:
      required:
      - username
      - password
      properties:
        username:
          type: string
        password:
          "$ref": "#/components/schemas/UserPassword"
    SignInUserResponse:
      required:
      - data
      properties:
        data:
          required:
          - authToken
          - user
          properties:
            authToken:
              type: string
            user:
              "$ref": "#/components/schemas/SafeUser"

    GetUsersResponse:
      required:
      - data
      properties:
        data:
          required:
          - users
          properties:
            users:
              "$ref": "#/components/schemas/SaveUsers"


    Error:
      required:
      - errors
      - message
      properties:
        errors:
          type: array
          items:
            type: string
        message:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
